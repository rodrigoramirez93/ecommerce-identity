# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

resources:
  repositories:
  - repository: ecommerce-shared
    type: git
    ref: develop
    name: ecommerce/ecommerce-shared
    trigger:
    - develop

trigger:
- develop

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*IdentityServer.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- checkout: ecommerce-shared
- checkout: self
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Install report generator tool. This tool enable us to merge all code coverage reports into a single one
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.0.0
  displayName: 'Install reportgenerator for code coverage'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*test.csproj'
    publishTestResults: true
    arguments: --no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --filter RunOnBuild=true
  displayName: 'Run Tests'
  continueOnError: false 

# Merge all coverage reports into a single one using reportgenerator
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Agent.TempDirectory)/CoverageReport -reporttypes:Cobertura
  displayName: 'Merge multiple code coverage reports into a single one'

# Publishing code coverage so azure devops can display the report 
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/CoverageReport/Cobertura.xml'
  displayName: 'Publish code coverage results'

# Using powershell script to check the code coverage of Foundation.Utility project. Asserting is not less than 100%
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      cd $(Agent.TempDirectory)
      $report = Get-ChildItem -Recurse -Filter "Cobertura.xml"
      $coverage =  Select-Xml -Path $report.PSPath -XPath "*/packages/*[@name='Identity.BusinessLogic']" |% {[decimal]::Parse($_.Node.Attributes['branch-rate'].Value) * 100}
      Write-Output "Identity.BusinessLogic code coverage ([int]$coverage)"
      if ($coverage -lt ${env:ECOMMERCE_TEST_THRESHOLD})
      {
        Write-Output "Identity.BusinessLogic expected code coverage: $([int]${env:ECOMMERCE_TEST_THRESHOLD}). Actual: $([int]$coverage)"
        throw;
      }
  displayName: 'Checking Identity.BusinessLogic has more than 0% code coverage'


- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'